/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ccsds_encoder.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(28ed1f27cf883c161e32223149443016)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/ccsds/ccsds_encoder.h>
// pydoc.h is automatically generated in the build directory
#include <ccsds_encoder_pydoc.h>

void bind_ccsds_encoder(py::module& m)
{

    using ccsds_encoder = ::gr::ccsds::ccsds_encoder;


    py::class_<ccsds_encoder,
               gr::tagged_stream_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<ccsds_encoder>>(m, "ccsds_encoder", D(ccsds_encoder))

        .def(py::init(&ccsds_encoder::make),
             py::arg("itemsize") = 0,
             py::arg("len_tag_key") = "packet_len",
             py::arg("rs_encode") = true,
             py::arg("interleave") = true,
             py::arg("scramble") = true,
             py::arg("idle") = true,
             py::arg("idle_block_time") = 50,
             py::arg("asm_tail") = false,
             py::arg("printing") = false,
             py::arg("verbose") = false,
             D(ccsds_encoder, make))


        .def("set_idle",
             &ccsds_encoder::set_idle,
             py::arg("idle"),
             D(ccsds_encoder, set_idle))


        .def("set_idle_block_time",
             &ccsds_encoder::set_idle_block_time,
             py::arg("idle_block_time"),
             D(ccsds_encoder, set_idle_block_time))


        .def("num_frames", &ccsds_encoder::num_frames, D(ccsds_encoder, num_frames))

        ;
}
